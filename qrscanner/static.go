// Code generated by "esc -o static.go -pkg qrscanner dist"; DO NOT EDIT.

package qrscanner

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/dist/main.js": {
		local:   "dist/main.js",
		size:    39105,
		modtime: 1541658821,
		compressed: `
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
`,
	},

	"/": {
		isDir: true,
		local: "",
	},

	"/dist": {
		isDir: true,
		local: "dist",
	},
}
